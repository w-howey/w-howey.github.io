<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Js on YanHowey Wang</title><link>https://howey.deno.dev/tags/js/</link><description>Recent content in Js on YanHowey Wang</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 05 Nov 2024 22:21:16 +0800</lastBuildDate><atom:link href="https://howey.deno.dev/tags/js/index.xml" rel="self" type="application/rss+xml"/><item><title>在浏览器扩展开发中，popup.js、content.js 和 background.js作用以及通信</title><link>https://howey.deno.dev/posts/241105/</link><pubDate>Tue, 05 Nov 2024 22:21:16 +0800</pubDate><guid>https://howey.deno.dev/posts/241105/</guid><description>在浏览器扩展开发中，popup.js、content.js 和 background.js 是三个常见的脚本文件，它们各自有不同的作用和调用方式。以下是它们的作用及如何相互调用的详细说明：
1. popup.js Link to heading 作用：处理弹出窗口（Popup）的逻辑。弹出窗口通常是在用户点击浏览器扩展图标时显示的小窗口。 主要任务： 响应用户的交互操作。 显示和更新界面内容。 与 background.js 进行通信，获取或发送数据。 2. content.js Link to heading 作用：注入到网页中的脚本，用于操作当前页面的DOM和CSS。 主要任务： 捕获和修改网页内容。 监听页面事件。 与 background.js 进行通信，传递数据或请求操作。 3. background.js Link to heading 作用：运行在扩展的后台，负责处理长时间运行的任务和全局状态管理。 主要任务： 管理扩展的生命周期。 存储和管理数据。 处理跨页面的通信。 监听和响应各种事件（如浏览器启动、标签页变化等）。 如何相互调用 Link to heading 1. popup.js 与 background.js 通信 Link to heading 发送消息： javascript// popup.js chrome.runtime.sendMessage({ action: &amp;#39;someAction&amp;#39;, data: someData }, function(response) { console.log(&amp;#39;Response from background:&amp;#39;, response); }); 接收消息： javascript// background.js chrome.</description></item></channel></rss>
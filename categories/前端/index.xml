<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>前端 on YanHowey Wang</title><link>https://howey.deno.dev/categories/%E5%89%8D%E7%AB%AF/</link><description>Recent content in 前端 on YanHowey Wang</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 07 Aug 2023 11:09:26 +0800</lastBuildDate><atom:link href="https://howey.deno.dev/categories/%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml"/><item><title>html5+css小知识（2）</title><link>https://howey.deno.dev/posts/2308070926/</link><pubDate>Mon, 07 Aug 2023 11:09:26 +0800</pubDate><guid>https://howey.deno.dev/posts/2308070926/</guid><description>css篇 Link to heading 1. 样式继承 Link to heading &amp;lt;b&amp;gt;元素继承了&amp;lt;p&amp;gt;s元素的样式
&amp;lt;p style=&amp;#34;color:red;&amp;#34;&amp;gt;这是&amp;lt;b&amp;gt;HTML5&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt; 样式继承只适用于元素的外观（文字、颜色、字体等），而元素在页面上的布局样式则不会被继承。如果继承这种样式，就必须使用强制继承：inherit。
强制继承布局样式
p { border: 1px solid red; } b { border : inherit; } 2. 选择器 Link to heading 2-1. 属性选择器 Link to heading //所需 CSS2 版本 [href] { color: orange; } [type=&amp;#34;password&amp;#34;] { border: 1px solid red; } //所需版本 CSS3 属性值开头匹配的属性选择器。 [href^=&amp;#34;http&amp;#34;] { color: orange; } //所需版本 CSS3 属性值结尾匹配的属性选择器。 [href$=&amp;#34;.com&amp;#34;] { color: orange; } //所需版本 CSS3 属性值包含指定字符的属性选择器。 [href*=&amp;#34;baidu&amp;#34;] { color: orange; } //所需版本 CSS2 属性值具有多个值时，匹配其中一个值的属性选择器。 [class~=&amp;#34;edf&amp;#34;] { font-size: 50px; } //所需版本 CSS2 属性值具有多个值且使用“-”号连接符分割的其中一个值的属性选择器 [lang|=&amp;#34;en&amp;#34;] { color: red; } 2-2.</description></item><item><title>html5+css小知识（1）</title><link>https://howey.deno.dev/posts/2308070957/</link><pubDate>Mon, 07 Aug 2023 09:21:16 +0800</pubDate><guid>https://howey.deno.dev/posts/2308070957/</guid><description>文本元素解析 Link to heading &amp;lt;br&amp;gt;强制换行、&amp;lt;wbr&amp;gt;安全换行
解释：在任意文本位置键入都会被换行，而在英文单词过长时使用会根据浏览器的宽度适当的裁切换行。
&amp;lt;br&amp;gt; Thisabc&amp;lt;wbr&amp;gt;dkedkslakdj&amp;lt;wbr&amp;gt;fkdlsakd is apple. &amp;lt;i&amp;gt;表示外文词汇或科技术语
解释：&amp;lt;i&amp;gt;元素实际作用就是倾斜。从语义上来看，表示区分周围内容，并不是特别强调或重要性。
&amp;lt;em&amp;gt;加以强调
解释：&amp;lt;em&amp;gt;元素实际作用和&amp;lt;i&amp;gt;一样，就是倾斜；从语义上来看，表示对一段文本的强调。
&amp;lt;s&amp;gt;表示不准确或校正
解释：&amp;lt;del&amp;gt;元素实际作用和&amp;lt;s&amp;gt;一样，就是删除线；从语义上来看，表示删除相关文字。
&amp;lt;ins&amp;gt;添加一段文本
解释：&amp;lt;ins&amp;gt;元素实际作用和&amp;lt;u&amp;gt;一样，加一条下划线；从语义上来看，是添加一段文本，起到强调的作用。
&amp;lt;small&amp;gt;添加小号字体
解释：&amp;lt;small&amp;gt;元素实际作用就是将文本放小一号。从语义上来看，用于免责声明和澄清声明。
&amp;lt;sub&amp;gt;&amp;lt;sup&amp;gt;添加上标和下标
解释：&amp;lt;sub&amp;gt;和&amp;lt;sup&amp;gt;元素 实际作用就是数学的上标和下标。语义也是如此。
&amp;lt;code&amp;gt;等表示输入和输出
解释：&amp;lt;code&amp;gt; 表示计算机代码片段；&amp;lt;var&amp;gt;表示编程语言中的变量；&amp;lt;samp&amp;gt;表示程序或计算机的输出；&amp;lt;kdb&amp;gt;表示用户的输入。由于这属于英文范畴的，必须将 lang=&amp;ldquo;en&amp;quot;英语才能体现效果。
&amp;lt;abbr&amp;gt;表示缩写
解释：元素没有实际作用；从语义上看，是一段文本的缩写。
&amp;lt;dfn&amp;gt;表示定义术语
解释：&amp;lt;dfn&amp;gt;元素就是一般性的倾斜；从语义上看，表示解释一个词或短语的一段文本。
&amp;lt;q&amp;gt;引用来自他处的内容
解释：&amp;lt;q&amp;gt;元素实际作用就是加了一对双引号。从语义上来看，表示引用来自其他地方的内容。
&amp;lt;cite&amp;gt;引用其他作品的标题
解释：元素实际作用就是加粗。从语义上来看，表示引用其他作品的标题。
&amp;lt;ruby&amp;gt;语言元素
解释：用来为非西方语言提供支持。用来帮助读者掌握表意语言文字正确发音。比如：汉语拼音在文字的上方。但目前 Firefox 还不支持此特性。
示例代码：
&amp;lt;ruby&amp;gt; 饕&amp;lt;rp&amp;gt;(&amp;lt;/rp&amp;gt;&amp;lt;rt&amp;gt;tāo&amp;lt;/rt&amp;gt;&amp;lt;rp&amp;gt;)&amp;lt;/rp&amp;gt; 餮&amp;lt;rp&amp;gt;(&amp;lt;/rp&amp;gt;&amp;lt;rt&amp;gt;tiè&amp;lt;/rt&amp;gt;&amp;lt;rp&amp;gt;)&amp;lt;/rp&amp;gt; &amp;lt;/ruby&amp;gt; 示例效果： 饕(tāo) 餮(tiè) &amp;lt;bdo&amp;gt;设置文字方向
解释：必须使用属性 dir 才可以设置，一共两个值：rtl（从右到左）和 ltr（从左到右）。一般默认是 ltr。还有一个元素也是处理方向的，由于是特殊语言的特殊效果，且主流浏览器大半不支持，忽略。
&amp;lt;mark&amp;gt;突出显示文本
解释：&amp;lt;mark&amp;gt;实际作用就是加上一个黄色的背景，黑色的字；从语义上来看，与上下文相关而突出的文本，用于记号。
&amp;lt;time&amp;gt;表示日期和时间
解释：&amp;lt;time&amp;gt;元素没有实际作用；从语义上来看，表示日期和时间。
分组元素 Link to heading 使用插图 Link to heading &amp;lt;figure&amp;gt; &amp;lt;figcaption&amp;gt; 这是一张图 &amp;lt;/figcaption&amp;gt; &amp;lt;img src=&amp;#34;img.</description></item><item><title>前端vue小知识</title><link>https://howey.deno.dev/posts/2308061943/</link><pubDate>Sun, 06 Aug 2023 19:43:02 +0800</pubDate><guid>https://howey.deno.dev/posts/2308061943/</guid><description>vue 模版语法 Link to heading 插值语法 Link to heading {{ name }} 指令语法 Link to heading v-bind:href=&amp;#34;url&amp;#34; 简写成 :href=&amp;#34;url&amp;#34; v-bind为单向数据绑定，页面数据修改了data值不会改变
双向绑定 Link to heading v-model只能应用在表单内元素上 Link to heading 例如：（错误例子，编译报错） Link to heading &amp;lt;h2 v-model:x=&amp;quot;2222&amp;quot;&amp;gt;hello&amp;lt;/h2&amp;gt;
v-model:value=&amp;quot;name&amp;quot;可以简写成v-model=&amp;quot;name&amp;quot; Link to heading el 与 data 的两种写法 Link to heading el 示例：
//第一种写法 new Vue({ el :&amp;#34;#root&amp;#34; }) //第二种写法 const x=new Vue() x.$mount(&amp;#34;#root&amp;#34;) data 有对象式和函数式两种写法， data 不要使用箭头函数，this 指向外面的 window
//不适用 data:()=&amp;gt;{ } //以下等价 data:function(){ } data(){ } mvvm 模型 Link to heading m:模型：data 数据</description></item><item><title>hugo + github actions + deno deploy部署自己的博客项目</title><link>https://howey.deno.dev/posts/2307262210/</link><pubDate>Sat, 05 Aug 2023 12:20:16 +0800</pubDate><guid>https://howey.deno.dev/posts/2307262210/</guid><description>使用 hugo+github actions +deno deploy 部署自己的博客项目 Link to heading 第一步：安装 golang 环境 Link to heading 第二步：安装 hugo Link to heading 第三步：git 新建两个仓库 Link to heading 仓库 1 名称为：xxxx.github.io xxx 为自己随便起的名称 简单就好 Link to heading 配置 pages Link to heading 进入仓库选择上方 settings 然后选择 pages 然后选择分支然后 save Link to heading 第三步：在另外一个仓库（源码仓库）action 重点： Link to heading name: deploy on: push: workflow_dispatch: schedule: # Runs everyday at 8:00 AM - cron: &amp;#34;0 0 * * *&amp;#34; jobs: build: runs-on: ubuntu-latest #权限很重要 不然depoly没权限 permissions: id-token: write # Allows authentication with Deno Deploy.</description></item><item><title>从0到1使用uniapp写小程序(第二章：引入uview)</title><link>https://howey.deno.dev/posts/230726/</link><pubDate>Wed, 26 Jul 2023 22:21:16 +0800</pubDate><guid>https://howey.deno.dev/posts/230726/</guid><description>安装 scss Link to heading uview 依赖于 scss 模块
安装 view Link to heading 下载安装: 登录一下 hbuild，一键导入 huilder 插件市场-view
配置 Link to heading 项目 main.js 中引入： // main.js import uView from &amp;#34;@/uni_modules/uview-ui&amp;#34;; Vue.use(uView); 注意这两行要放在 import Vue 之后。
引入 scss Link to heading @import &amp;#34;@/uni_modules/uview-ui/theme.scss&amp;#34;; app.vue 引入 基础样式 首行加入 lang=&amp;ldquo;scss&amp;rdquo; Link to heading &amp;lt;style lang=&amp;#34;scss&amp;#34;&amp;gt; /* 注意要写在第一行，同时给style标签加入lang=&amp;#34;scss&amp;#34;属性 */ @import &amp;#34;@/uni_modules/uview-ui/index.scss&amp;#34;; &amp;lt;/style&amp;gt; 配置 easycom 组件模式 Link to heading 打开 pages.json 加入 // pages.</description></item></channel></rss>
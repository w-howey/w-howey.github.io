<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>后端 on YanHowey Wang</title><link>https://howey.deno.dev/categories/%E5%90%8E%E7%AB%AF/</link><description>Recent content in 后端 on YanHowey Wang</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 05 Jun 2024 15:21:16 +0800</lastBuildDate><atom:link href="https://howey.deno.dev/categories/%E5%90%8E%E7%AB%AF/index.xml" rel="self" type="application/rss+xml"/><item><title>docker-compose搭建minio服务</title><link>https://howey.deno.dev/posts/24060512212/</link><pubDate>Wed, 05 Jun 2024 15:21:16 +0800</pubDate><guid>https://howey.deno.dev/posts/24060512212/</guid><description> 配置文件：docker-compose.yml Link to heading version: &amp;#39;3&amp;#39; services: minio: image: minio/minio:latest container_name: my-minio environment: MINIO_ROOT_USER: howey MINIO_ROOT_PASSWORD: 12345678 #密码必须八位 ports: - &amp;#34;9000:9000&amp;#34; - &amp;#34;9001:9001&amp;#34; # 可选，用于HTTPS volumes: - ./data:/data command: server /data --console-address &amp;#34;:9001&amp;#34; networks: # 配置docker network app_net: driver: bridge</description></item><item><title>nginx配置详解</title><link>https://howey.deno.dev/posts/2024050917/</link><pubDate>Thu, 09 May 2024 17:43:02 +0800</pubDate><guid>https://howey.deno.dev/posts/2024050917/</guid><description>Nginx配置详解及优化 Link to heading Nginx的配置文件通常分为几个部分：main（全局设置）、events（事件设置）、http（http相关设置）以及server（服务器特定设置）。每个部分都包含了影响Nginx行为的指令。 Link to heading nginx.conf Link to heading #定义了Nginx进程运行的用户和组，这里使用的是nginx用户和组 user nginx nginx; # 定义了Nginx的工作进程数，这里设置为2，通常与CPU核心数相匹配 worker_processes 2; #将work process绑定到特定cpu上，避免进程在cpu间切换的开销, #如2核为01 10，四核为0001 0010 0100 1000，依次类推；有多少个核，就有几位数，最多开启8个 #1表示该内核开启，0表示该内核关闭。 worker_cpu_affinity 01 10; # 错误日志存在目录及日志级别[ debug | info | notice | warn | error | crit ] error_log /var/log/nginx/error.log warn; # 指定 pid 存放的路径 pid /var/run/nginx.pid; # 定义了工作进程的最大文件打开数限制，最好小于/etc/security/limits.conf 系统配置里的nofile 数量 worker_rlimit_nofile 32000; events { #单个进程允许的客户端连接数，一般比worker_rlimit_nofile小 worker_connections 16000; # 告诉nginx收到一个新连接通知后接受尽可能多的连接 multi_accept on; #epoll比poll和select性能更好，适用于高并发场景 use epoll; } http { #包含MIME类型配置文件 include /etc/nginx/mime.</description></item><item><title>golang获取百度查询结果并截屏封装windows程序</title><link>https://howey.deno.dev/posts/2309091559/</link><pubDate>Sat, 02 Sep 2023 15:59:02 +0800</pubDate><guid>https://howey.deno.dev/posts/2309091559/</guid><description>获取百度查询结果并截屏保存图片，无需打开浏览器 Link to heading 源码 Link to heading package main import ( &amp;#34;fmt&amp;#34; &amp;#34;fyne.io/fyne/v2&amp;#34; &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/container&amp;#34; &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; &amp;#34;fyne.io/fyne/v2/layout&amp;#34; &amp;#34;fyne.io/fyne/v2/widget&amp;#34; &amp;#34;github.com/flopp/go-findfont&amp;#34; &amp;#34;github.com/go-vgo/robotgo&amp;#34; &amp;#34;github.com/kbinani/screenshot&amp;#34; _ &amp;#34;image/jpeg&amp;#34; &amp;#34;image/png&amp;#34; _ &amp;#34;image/png&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;os&amp;#34; &amp;#34;os/exec&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;time&amp;#34; ) var CACHEPATH = &amp;#34;./cache&amp;#34; var IMGPATH = &amp;#34;./resultImage&amp;#34; var CACHEFILE = &amp;#34;scree.cache&amp;#34; var DEFAULTWAIT = &amp;#34;3&amp;#34; func init() { //设置中文字体:解决中文乱码问题 fontPaths := findfont.List() for _, path := range fontPaths { if strings.Contains(path, &amp;#34;msyh.ttf&amp;#34;) || strings.Contains(path, &amp;#34;simhei.ttf&amp;#34;) || strings.</description></item><item><title>获取百度查询结果并截屏</title><link>https://howey.deno.dev/posts/2309021559/</link><pubDate>Sat, 02 Sep 2023 15:59:02 +0800</pubDate><guid>https://howey.deno.dev/posts/2309021559/</guid><description>获取百度查询结果并截屏保存图片，无需打开浏览器 Link to heading 前置安装依赖 Link to heading go get -u github.com/chromedp/chromedp 源码 Link to heading package main import ( &amp;#34;context&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;log&amp;#34; &amp;#34;time&amp;#34; &amp;#34;github.com/chromedp/chromedp&amp;#34; ) func main() { ctx, cancel := chromedp.NewContext(context.Background()) defer cancel() if err := chromedp.Run(ctx, chromedp.Navigate(&amp;#34;https://www.baidu.com&amp;#34;)); err != nil { log.Fatal(err) } if err := chromedp.Run(ctx, chromedp.Sleep(2*time.Second)); err != nil { log.Fatal(err) } keywords := []string{&amp;#34;内容1&amp;#34;, &amp;#34;内容2&amp;#34;} fullscreen(ctx, keywords) } func fullscreen(ctx context.Context, keywords []string) { suffixArray := [7]string{&amp;#34;诉讼&amp;#34;, &amp;#34;被告&amp;#34;, &amp;#34;违法&amp;#34;, &amp;#34;融资&amp;#34;, &amp;#34;拖欠欠税&amp;#34;, &amp;#34;排污&amp;#34;, &amp;#34;不良&amp;#34;} for _, val := range keywords { for _, value := range suffixArray { searchQuery := val + &amp;#34; &amp;#34; + value fullscreenMain(ctx, searchQuery) } } } func fullscreenMain(ctx context.</description></item><item><title>Go开发之初始化（1）</title><link>https://howey.deno.dev/posts/2308071644/</link><pubDate>Mon, 07 Aug 2023 16:44:46 +0800</pubDate><guid>https://howey.deno.dev/posts/2308071644/</guid><description>Hello World ！ Link to heading 创建文件夹xxx go mod init xxx 创建文件main.go 输出 hello World！ package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;hello world!&amp;#34;) } 建立web服务器 Link to heading package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;strings&amp;#34; ) func sayhelloName(w http.ResponseWriter, r *http.Request) { r.ParseForm() //解析参数，默认是不会解析的 fmt.Println(r.Form) //这些信息是输出到服务器端的打印信息 fmt.Println(&amp;#34;path&amp;#34;, r.URL.Path) fmt.Println(&amp;#34;scheme&amp;#34;, r.URL.Scheme) fmt.Println(r.Form[&amp;#34;url_long&amp;#34;]) for k, v := range r.Form { fmt.Println(&amp;#34;key:&amp;#34;, k) fmt.Println(&amp;#34;val:&amp;#34;, strings.Join(v, &amp;#34;&amp;#34;)) } fmt.Fprintf(w, &amp;#34;Hello astaxie!&amp;#34;) //这个写入到w的是输出到客户端的 } func main() { http.</description></item><item><title>windows如何取消桌面图标右下角带快捷方式？</title><link>https://howey.deno.dev/posts/2308052141/</link><pubDate>Sat, 05 Aug 2023 21:42:55 +0800</pubDate><guid>https://howey.deno.dev/posts/2308052141/</guid><description> windows 如何取消桌面图标右下角带快捷方式？ Link to heading 新建文本文档，复制一下内容，改名为 xxx.bat Link to heading reg add &amp;#34;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Icons&amp;#34; /v 29 /d &amp;#34;%systemroot%\system32\imageres.dll,197&amp;#34; /t reg_sz /f taskkill /f /im explorer.exe attrib -s -r -h &amp;#34;%userprofile%\AppData\Local\iconcache.db&amp;#34; del &amp;#34;%userprofile%\AppData\Local\iconcache.db&amp;#34; /f /q start explorer pause</description></item><item><title>如何完全卸载chrome？</title><link>https://howey.deno.dev/posts/23080521/</link><pubDate>Sat, 05 Aug 2023 21:19:01 +0800</pubDate><guid>https://howey.deno.dev/posts/23080521/</guid><description> 如何完全卸载 chrome？ Link to heading 新建文本文档，复制一下内容，改名为 remove.reg Link to heading Windows Registry Editor Version 5.00 ; WARNING, this file will remove Google Chrome registry entries ; from your Windows Registry. Consider backing up your registry before ; using this file: http://support.microsoft.com/kb/322756 ; To run this file, save it as &amp;#39;remove.reg&amp;#39; on your desktop and double-click it. [-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\ChromeHTML] [-HKEY_LOCAL_MACHINE\SOFTWARE\Clients\StartMenuInternet\chrome.exe] [HKEY_LOCAL_MACHINE\SOFTWARE\RegisteredApplications] &amp;#34;Chrome&amp;#34;=- [-HKEY_CURRENT_USER\SOFTWARE\Classes\ChromeHTML] [-HKEY_CURRENT_USER\SOFTWARE\Clients\StartMenuInternet\chrome.exe] [HKEY_CURRENT_USER\SOFTWARE\RegisteredApplications] &amp;#34;Chrome&amp;#34;=- [-HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Uninstall\Chrome] [-HKEY_CURRENT_USER\Software\Google\Update\Clients\{8A69D345-D564-463c-AFF1-A69D9E530F96}] [-HKEY_CURRENT_USER\Software\Google\Update\ClientState\{8A69D345-D564-463c-AFF1-A69D9E530F96}] [-HKEY_CURRENT_USER\Software\Google\Update\Clients\{00058422-BABE-4310-9B8B-B8DEB5D0B68A}] [-HKEY_CURRENT_USER\Software\Google\Update\ClientState\{00058422-BABE-4310-9B8B-B8DEB5D0B68A}] [-HKEY_LOCAL_MACHINE\SOFTWARE\Google\Update\ClientStateMedium\{8A69D345-D564-463c-AFF1-A69D9E530F96}] [-HKEY_LOCAL_MACHINE\SOFTWARE\Google\Update\Clients\{8A69D345-D564-463c-AFF1-A69D9E530F96}] [-HKEY_LOCAL_MACHINE\SOFTWARE\Google\Update\ClientState\{8A69D345-D564-463c-AFF1-A69D9E530F96}] [-HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Google\Update\Clients\{8A69D345-D564-463c-AFF1-A69D9E530F96}]</description></item><item><title>如何获取快手直播弹幕？</title><link>https://howey.deno.dev/posts/230805/</link><pubDate>Sat, 05 Aug 2023 21:19:01 +0800</pubDate><guid>https://howey.deno.dev/posts/230805/</guid><description># coding:utf-8 import requests import re import time headers = { &amp;#34;User-Agent&amp;#34;: &amp;#34;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.163 Safari/535.1&amp;#34; } # 正则表达式列表，两个双引号内为正则表达式 re_id = &amp;#34;&amp;#34;r&amp;#39;(?&amp;lt;=liveStream&amp;#34;:{&amp;#34;id&amp;#34;:&amp;#34;)(.*?)(?=&amp;#34;,)&amp;#39;&amp;#34;&amp;#34; re_feeds = &amp;#34;&amp;#34;r&amp;#39;(?&amp;lt;=liveStreamFeeds\\\&amp;#34;:)(.*?)(?=}\&amp;#34;)&amp;#39;&amp;#34;&amp;#34; re_userName = &amp;#34;&amp;#34;r&amp;#39;(?&amp;lt;=userName\\\&amp;#34;:\\\&amp;#34;)(.*?)(?=\\\&amp;#34;,\\\&amp;#34;)&amp;#39;&amp;#34;&amp;#34; re_content = &amp;#34;&amp;#34;r&amp;#39;(?&amp;lt;=content\\\&amp;#34;:\\\&amp;#34;)(.*?)(?=\\\&amp;#34;,\\\&amp;#34;)&amp;#39;&amp;#34;&amp;#34; URL = input(&amp;#34;直播间链接：&amp;#34;) # 直播间链接标准格式：https://live.kuaishou.com/u/*** # 获取LiveStreamId r = requests.get(URL, headers=headers) LiveStreamId = re.findall(re_id, r.text) if LiveStreamId: # 弹幕地址 danmu_list = &amp;#39;http://livev.m.chenzhongtech.com/wap/live/feed?liveStreamId=&amp;#39; + LiveStreamId[0] else: print(&amp;#34;获取liveStreamID失败&amp;#34;) while LiveStreamId: i = 0 time.sleep(3) # 3秒获取一次 # 获取弹幕列表 r = requests.</description></item><item><title>gin 项目初始化之mysql连接</title><link>https://howey.deno.dev/posts/2307262202/</link><pubDate>Wed, 26 Jul 2023 22:21:16 +0800</pubDate><guid>https://howey.deno.dev/posts/2307262202/</guid><description>gin 项目初始化之 mysql 连接 Link to heading 1. 安装相关包 Link to heading go get gorm.io/gorm go get gorm.io/driver/mysql 2.修改 mysql 相关配置如下： Link to heading mysql: host: 127.0.0.1 port: 3306 db: nlkj_db table_prefix: nlkj_ user: root password: 123456 log_level: dev config: &amp;#34;charset=utf8&amp;amp;parseTime=True&amp;amp;loc=Local&amp;#34; max_idle_cons: 10 MaxOpenCons: 100 对应 mysql 配置结构体修改如下
package config import &amp;#34;strconv&amp;#34; type Mysql struct { Host string `yaml:&amp;#34;host&amp;#34;` Port int `yaml:&amp;#34;port&amp;#34;` DB string `yaml:&amp;#34;db&amp;#34;` TablePrefix string `yaml:&amp;#34;table_prefix&amp;#34;` User string `yaml:&amp;#34;user&amp;#34;` Password string `yaml:&amp;#34;password&amp;#34;` LogLevel string `yaml:&amp;#34;log_level&amp;#34;` Config string `yaml:&amp;#34;config&amp;#34;` MaxIdleCons int `yaml:&amp;#34;max_idle_cons&amp;#34;` MaxOpenCons int `yaml:&amp;#34;max_open_cons&amp;#34;` } // 连接url拼接 func (m *Mysql) Dsn() string { return m.</description></item><item><title>gin 项目初始化之配置文件</title><link>https://howey.deno.dev/posts/2307262203/</link><pubDate>Wed, 26 Jul 2023 22:21:16 +0800</pubDate><guid>https://howey.deno.dev/posts/2307262203/</guid><description>配置文件 Link to heading 安装 yaml 解析包 Link to heading go get gopkg.in/yarm.v2 项目目录下新建settings.yaml 配置如下：
app: page_size: 10 jwt_serret: 23347$040412 run_mode: debug server: host: &amp;#34;0.0.0.0&amp;#34; port: 8080 env: dev read_timeout: 60 write_timeout: 60 logger: level: info prefix: &amp;#34;[nlkj_info]&amp;#34; director: log show-line: true log-in-console: true mysql: host: 127.0.0.1 port: 3306 db: nlkj_db table_prefix: blkj_ user: root password: 123456 log_level: dev 目录下新建 config/config.go 文件
package config type Config struct { App App Server Server Logger Logger Mysql Mysql } 目录下新建 config/mysql.</description></item><item><title>gin项目初始化之logrus配置</title><link>https://howey.deno.dev/posts/2307262204/</link><pubDate>Wed, 26 Jul 2023 22:21:16 +0800</pubDate><guid>https://howey.deno.dev/posts/2307262204/</guid><description>gin 项目初始化之 logrus 配置 Link to heading 1. 安装 logrus Link to heading go get github.com/sirupsen/logrus 2. 配置 global Link to heading package global import ( &amp;#34;gin_vue_blog/config&amp;#34; &amp;#34;github.com/sirupsen/logrus&amp;#34; &amp;#34;gorm.io/gorm&amp;#34; ) var ( Config *config.Config DB *gorm.DB Log *logrus.Logger ) 3.新建 core/logrus.go 文件 Link to heading package core import ( &amp;#34;bytes&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;gin_vue_blog/global&amp;#34; &amp;#34;github.com/sirupsen/logrus&amp;#34; &amp;#34;os&amp;#34; &amp;#34;path&amp;#34; &amp;#34;time&amp;#34; ) const ( red = 31 yellow = 33 blue = 36 gray = 37 ) type LogFormatter struct { } func (t *LogFormatter) Format(entry *logrus.</description></item><item><title>laravel 怎么实现第三方登录？——以QQ为例</title><link>https://howey.deno.dev/posts/2307262211/</link><pubDate>Wed, 26 Jul 2023 22:21:16 +0800</pubDate><guid>https://howey.deno.dev/posts/2307262211/</guid><description>laravel 怎么实现第三方登录？——以 QQ 为例 Link to heading 例如我们需要 qq 的第三方登录支持，首先需要升级 sociaite，那么我们就需要安装一个 composer 包，打开 laragon 终端。执行安装命令。 composer require socialiteproviders/qq //后面的为key可以换成weibo等 跑完命令之后我们需要加入事件监听器：在app/Providers/EventServiceProvide.php中protected $listen=[];中加入： Registered::class =&amp;gt; [ SendEmailVerificationNotification::class, ], &amp;#39;SocialiteProviders\Manager\SocialiteWasCalled&amp;#39; =&amp;gt; [ &amp;#39;SocialiteProviders\QQ\QqExtendSocialite@handle&amp;#39;, ], ]; 去.env里面配置一下key和secret QQ_KEY=your key QQ_SECRET=your secret QQ_REDIRECT_URI=http://your-callback-url, 去config/services.php中加入 &amp;#39;client_id&amp;#39; =&amp;gt; env(&amp;#39;QQ_KEY&amp;#39;), // Your QQ Client ID &amp;#39;client_secret&amp;#39; =&amp;gt; env(&amp;#39;QQ_SECRET&amp;#39;), // Your QQ Client Secret &amp;#39;redirect&amp;#39; =&amp;gt;env(&amp;#39;QQ_REDIRECT_URI&amp;#39;), //这个地址很重要 ], 设计路由：在web.php当中,思考：我们需要定义两个路由，一个是跳转到 qq 登录给予权限的页面，和 qq 回退过来之后的页面,路由设计如下： Route::namespace(&amp;#39;Auth&amp;#39;)-&amp;gt;prefix(&amp;#39;auth/qq&amp;#39;)-&amp;gt;group(function () { Route::get(&amp;#39;/&amp;#39;, &amp;#39;SocialitesController@qq&amp;#39;); Route::get(&amp;#39;callback&amp;#39;, &amp;#39;SocialitesController@callback&amp;#39;); }); 前缀和命名空间可以随意更改,打印路由终端命令：php artisan r:l</description></item><item><title>laravel+tp项目如何上线以及ssl证书的配置</title><link>https://howey.deno.dev/posts/2307262212/</link><pubDate>Wed, 26 Jul 2023 22:21:16 +0800</pubDate><guid>https://howey.deno.dev/posts/2307262212/</guid><description>写完的项目如何部署上线呢？ Link to heading 前言：前几天的文章有写到虚拟机的安装那一块，配置了 nginx，mysql，和 php Link to heading （一）域名解析及 ssl 证书的申请 Link to heading 以腾讯云为例：
进入控制台，域名管理，解析，会进入到另外一个页面 添加记录 主机记录：abc 记录类型：A 线路类型：默认 记录值：服务器公网 ip 其他不用改，直接解析 注：（1）如果你在主机记录第一个框中填入了 www，代表你解析的是一级域名，一级域名只能绑一个项目，也就是你上线后你的域名需要www.xxxx.com , （2）解析成二级域名，主机记录框随便写，例如 abc，那么访问就变成了abc.xxxx.com 申请 ssl 证书（可要可不要，没有就是 http 连接访问，申请后配置可转换为 https 访问）例如：没有证书：http://abc.xxxxx.com加了证书之后https://abc.xxxx.com 证书的申请步骤： (1) 控制台，云产品点进 ssl 证书 （2）申请免费证书 （3）等待审核，审核完后才能下载到本地 （二）xshell 连接服务器，配置 nginx Link to heading 命令：ssh xxx@xx.xxx.xx.xxx //xxx:线上服务器用户名可修改 xx.xxx.xx.xxx:服务器公网ip 然后会弹出一个框再输入线上服务器的密码 sudo su //管理员权限 cd /返回根目录 cd etc/nginx/sites-available/ //进入nginx下面 ls cp default php //php是我随意定义的 vi php laravel 项目将 nginx 做如下配置 详细代码如下：</description></item></channel></rss>
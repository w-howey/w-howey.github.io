<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>编程系列 on YanHowey Wang</title><link>http://www.example.com/series/%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97/</link><description>Recent content in 编程系列 on YanHowey Wang</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 26 Jul 2023 22:21:16 +0800</lastBuildDate><atom:link href="http://www.example.com/series/%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97/index.xml" rel="self" type="application/rss+xml"/><item><title>gin 项目初始化之mysql连接</title><link>http://www.example.com/posts/gin-%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B9%8Bmysql%E8%BF%9E%E6%8E%A5/</link><pubDate>Wed, 26 Jul 2023 22:21:16 +0800</pubDate><guid>http://www.example.com/posts/gin-%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B9%8Bmysql%E8%BF%9E%E6%8E%A5/</guid><description>gin 项目初始化之 mysql 连接 Link to heading 1. 安装相关包 Link to heading go get gorm.io/gorm go get gorm.io/driver/mysql 2.修改 mysql 相关配置如下： Link to heading mysql: host: 127.0.0.1 port: 3306 db: nlkj_db table_prefix: nlkj_ user: root password: 123456 log_level: dev config: &amp;#34;charset=utf8&amp;amp;parseTime=True&amp;amp;loc=Local&amp;#34; max_idle_cons: 10 MaxOpenCons: 100 对应 mysql 配置结构体修改如下
package config import &amp;#34;strconv&amp;#34; type Mysql struct { Host string `yaml:&amp;#34;host&amp;#34;` Port int `yaml:&amp;#34;port&amp;#34;` DB string `yaml:&amp;#34;db&amp;#34;` TablePrefix string `yaml:&amp;#34;table_prefix&amp;#34;` User string `yaml:&amp;#34;user&amp;#34;` Password string `yaml:&amp;#34;password&amp;#34;` LogLevel string `yaml:&amp;#34;log_level&amp;#34;` Config string `yaml:&amp;#34;config&amp;#34;` MaxIdleCons int `yaml:&amp;#34;max_idle_cons&amp;#34;` MaxOpenCons int `yaml:&amp;#34;max_open_cons&amp;#34;` } // 连接url拼接 func (m *Mysql) Dsn() string { return m.</description></item><item><title>gin 项目初始化之配置文件</title><link>http://www.example.com/posts/gin%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link><pubDate>Wed, 26 Jul 2023 22:21:16 +0800</pubDate><guid>http://www.example.com/posts/gin%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid><description>配置文件 Link to heading 安装 yaml 解析包 Link to heading go get gopkg.in/yarm.v2 项目目录下新建settings.yaml 配置如下：
app: page_size: 10 jwt_serret: 23347$040412 run_mode: debug server: host: &amp;#34;0.0.0.0&amp;#34; port: 8080 env: dev read_timeout: 60 write_timeout: 60 logger: level: info prefix: &amp;#34;[nlkj_info]&amp;#34; director: log show-line: true log-in-console: true mysql: host: 127.0.0.1 port: 3306 db: nlkj_db table_prefix: blkj_ user: root password: 123456 log_level: dev 目录下新建 config/config.go 文件
package config type Config struct { App App Server Server Logger Logger Mysql Mysql } 目录下新建 config/mysql.</description></item><item><title>gin项目初始化之logrus配置</title><link>http://www.example.com/posts/gin%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B9%8Blogrus%E9%85%8D%E7%BD%AE/</link><pubDate>Wed, 26 Jul 2023 22:21:16 +0800</pubDate><guid>http://www.example.com/posts/gin%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B9%8Blogrus%E9%85%8D%E7%BD%AE/</guid><description>gin 项目初始化之 logrus 配置 Link to heading 1. 安装 logrus Link to heading go get github.com/sirupsen/logrus 2. 配置 global Link to heading package global import ( &amp;#34;gin_vue_blog/config&amp;#34; &amp;#34;github.com/sirupsen/logrus&amp;#34; &amp;#34;gorm.io/gorm&amp;#34; ) var ( Config *config.Config DB *gorm.DB Log *logrus.Logger ) 3.新建 core/logrus.go 文件 Link to heading package core import ( &amp;#34;bytes&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;gin_vue_blog/global&amp;#34; &amp;#34;github.com/sirupsen/logrus&amp;#34; &amp;#34;os&amp;#34; &amp;#34;path&amp;#34; &amp;#34;time&amp;#34; ) const ( red = 31 yellow = 33 blue = 36 gray = 37 ) type LogFormatter struct { } func (t *LogFormatter) Format(entry *logrus.</description></item><item><title>hadoop集群搭建（二）之集群配置</title><link>http://www.example.com/posts/hadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E4%BA%8C%E4%B9%8B%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/</link><pubDate>Wed, 26 Jul 2023 22:21:16 +0800</pubDate><guid>http://www.example.com/posts/hadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E4%BA%8C%E4%B9%8B%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/</guid><description>hadoop 集群搭建（二）之集群配置 Link to heading @TOC
一、集群部署规划 Link to heading 1.NameNode 和 SecoundNameNode 不要安装在同一台服务器 2.ResourceManager 也很消耗内存，不要和 NameNode、SecoundNameNode 配置在同一台机器上
hadoop102 hadoop103 hadoop104 HDFS NameNode DataNode DataNode SecoundNameNode DataNode yarn NodeManager ResourceManager NodeManager NodeManager 二、修改配置文件 Link to heading 1. /opt/module/hadoop-3.3.1/etc/hadoop/core-site.xml Link to heading &amp;lt;configuration&amp;gt; &amp;lt;!--指定nodename地址 --&amp;gt; &amp;lt;property&amp;gt; &amp;lt;name&amp;gt;fs.defaultFS&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;hdfs://hadoop102:8020&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;!-- ָ指定hadoop数据的存储目录 --&amp;gt; &amp;lt;property&amp;gt; &amp;lt;name&amp;gt;hadoop.tmp.dir&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;/opt/module/hadoop-3.3.1/data&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;!-- 配置hsfs网页登录使用的静态用户--&amp;gt; &amp;lt;!-- &amp;lt;property&amp;gt; --&amp;gt; &amp;lt;!-- &amp;lt;name&amp;gt;hadoop.http.staticuser.user&amp;lt;/name&amp;gt; --&amp;gt; &amp;lt;!-- &amp;lt;value&amp;gt;howey&amp;lt;/value&amp;gt; --&amp;gt; &amp;lt;!-- &amp;lt;/property&amp;gt; --&amp;gt; &amp;lt;/configuration&amp;gt; 2.</description></item><item><title>HDFS介绍以及shell操作</title><link>http://www.example.com/posts/hdfs%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8Ashell%E6%93%8D%E4%BD%9C/</link><pubDate>Wed, 26 Jul 2023 22:21:16 +0800</pubDate><guid>http://www.example.com/posts/hdfs%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8Ashell%E6%93%8D%E4%BD%9C/</guid><description>HDFS Link to heading @[TOC]
一、HDFS 定义 Link to heading HDFS 即（hadoop distributed file system），采用目录树来定位文件；其次，它是分布式的，由很多服务器联合起来实现其功能，集群中的服务器有各自的角色 HDFS 的使用场景：适合一次写入，多次读出的场景
二、HDFS 优缺点： Link to heading 1.优点： Link to heading 高容错性 数据自动保存多个副本。通过增加副本的形式，提高容错性 某一个副本丢失以后，可以自动回复 适合处理大数据 数据规模大的（甚至 PB），文件规模大的（上百万） 可以构建在廉价机器上，通过多副本机制，提高可靠性 2.缺点： Link to heading 不适合低延时数据访问，比如毫秒级存储 无法高效的对大量小文件进行存储（1.存储大量小文件，会占用 nameNode 大量的内存用来存储文件目录和块消息，namenode 内存总是有限的 2.小文件存储的寻址时间会超过读取时间，违反了 hdfs 的设计目的） 不支持并发写入，文件的随机修改，（1.一个文件只能有一个写，不允许多个线程同时写 2.仅支持数据的追加，不支持修改） 三、HDFS 组织架构 Link to heading client: 分别访问 NameNode 和 DataNode 以获取文件的元信息及内容。
SecondaryNamenode：辅助 namenode 用于定期合并 fsimage 和 edits，生成新的 fsimage，并推送给 Namenode，在紧急情况下 可用于恢复 namenode 部分数据</description></item><item><title>HDFS常用API操作</title><link>http://www.example.com/posts/hdfs%E5%B8%B8%E7%94%A8api%E6%93%8D%E4%BD%9C/</link><pubDate>Wed, 26 Jul 2023 22:21:16 +0800</pubDate><guid>http://www.example.com/posts/hdfs%E5%B8%B8%E7%94%A8api%E6%93%8D%E4%BD%9C/</guid><description>1.下载 winutils.exe Link to heading https://codeload.github.com/tangchunbo/apache-hadoop-3.1.1-winutils/zip/refs/heads/master 然后解压将文件拷贝到 bin 目录下 D:\Java\hadoop-3.3.1\bin 依赖导入
&amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.hadoop&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hadoop-client&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.1.3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.12&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;slf4j-log4j12&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.7.30&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; package com.howey.hdfs; import org.apache.hadoop.conf.Configuration; import org.apache.hadoop.fs.*; import org.junit.After; import org.junit.Before; import org.junit.Test; import java.io.IOException; import java.net.URI; import java.net.URISyntaxException; import java.util.Arrays; /** * 1.获取客户端对象 * 2.执行相关的操作命令 * 3.关闭资源 */ public class HdfsClient { private FileSystem fs; @Before public void init() throws URISyntaxException, IOException, InterruptedException { URI uri = new URI(&amp;#34;hdfs://hadoop102:8020&amp;#34;); //创建一个配置文件 Configuration entries = new Configuration(); //设置副本 entries.</description></item><item><title>HDFS读写数据流程</title><link>http://www.example.com/posts/hdfs%E8%AF%BB%E5%86%99%E6%95%B0%E6%8D%AE%E6%B5%81%E7%A8%8B/</link><pubDate>Wed, 26 Jul 2023 22:21:16 +0800</pubDate><guid>http://www.example.com/posts/hdfs%E8%AF%BB%E5%86%99%E6%95%B0%E6%8D%AE%E6%B5%81%E7%A8%8B/</guid><description>HDFS 读写数据流程 Link to heading @[TOC]
一、HDFS 写数据流程 Link to heading 客户端发起请求上传文件 namenode 检查目录树是否可以创建文件（1.检查权限，2 检查目录树结构，目录是否存在）并响应客户端是否可上传 客户端对文件进行分操作形成 block 块 请求上传第一个 block，请求返回 datanode（上传的数据真实存储的地址） 根据机架感应原理，网络拓扑关系，副本机制，找到相应可以上传的 datanode 连接列表，返回给客户端。 根据返回的连接列表 客户端请求与第一台机器建立 block 传输通道 datanode 连接列表一次进行连接形成一条完整的 pipeline 管道 客户端，将第一个数据包 packet（64k 由（chunk512b+chunksum4b）组成）发送数据，然后依次由服务器进行管道传输，服务器会自我保存一份 第一个请求完成之后，建立一条反向应答通道，ack 应答机制 10.第一个请求完成之后，开始继续发送 packet，当第一个 block 发送完成后，此时 client 重新向 namenode 发送请求，获取第二个 block 应该存储到哪个 datanode 中，接着开始从第 5 步不断执行，直到所有的 block 完全写入。 二、节点距离计算 Link to heading 到达共同祖先 Distance(d1/r2/n0,d1/r3/n0)=4
三、机架感知 Link to heading 机架感知是一种计算不同计算节点（TaskTracker）的距离的技术，用以在任务调度过程中尽量减少网络带宽资源的消耗，这里用尽量，想表达的是当一个 TT（TaskTracker）申请不到本地化任务时，JT（JobTracker）会尽量调度一个机架的任务给他，因为不同机架的网络带宽资源比同一个机架的网络带宽资源更可贵。
第一个副本选择在 client 所处的节点上，如果客户端在集群外随机选一个
第二个副本在另一个机架的随机节点上 第三个在第二个副本所在的机架的随机节点上</description></item><item><title>hodoop集群搭建之分发脚本以及ssh免密登录</title><link>http://www.example.com/posts/hodoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E4%B9%8B%E5%88%86%E5%8F%91%E8%84%9A%E6%9C%AC%E4%BB%A5%E5%8F%8Assh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</link><pubDate>Wed, 26 Jul 2023 22:21:16 +0800</pubDate><guid>http://www.example.com/posts/hodoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E4%B9%8B%E5%88%86%E5%8F%91%E8%84%9A%E6%9C%AC%E4%BB%A5%E5%8F%8Assh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</guid><description>hodoop 介绍 Link to heading @TOC
一、hadoop 三种运行模式 Link to heading 本地模式 ：数据存储在 linux 本地（只是在测试偶尔用） 伪分布式：数据存储在 HDFS（一台主机模拟多主机） 完全分布式：数据存储在 HDFS（多台服务器工作）企业大量使用
二、模式示例 Link to heading 1.本地模式 Link to heading 在 hadoop 文件夹下新建
mkdir wcinput cd wcinput vim word.txt //任意写入内容 ./wcoutput 要是不存在的文件夹，不然会抛出异常
hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.3.1.jar wordcount wcinput/ ./wcoutput cat part-r-00000 2.完全分布式模式 Link to heading （1）流程 Link to heading 准备 3 台客户机（关闭防火墙，静态 ip，主机名称） List item 安装 jdk，hadoop 配置环境变量 配置集群 单点启动 配置 ssh 群起测试集群 （2）编写集群分发脚本 xsync Link to heading 1.</description></item><item><title>laravel 怎么实现第三方登录？——以QQ为例</title><link>http://www.example.com/posts/laravel-%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E4%BB%A5qq%E4%B8%BA%E4%BE%8B/</link><pubDate>Wed, 26 Jul 2023 22:21:16 +0800</pubDate><guid>http://www.example.com/posts/laravel-%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E4%BB%A5qq%E4%B8%BA%E4%BE%8B/</guid><description>laravel 怎么实现第三方登录？——以 QQ 为例 Link to heading 例如我们需要 qq 的第三方登录支持，首先需要升级 sociaite，那么我们就需要安装一个 composer 包，打开 laragon 终端。执行安装命令。 composer require socialiteproviders/qq //后面的为key可以换成weibo等 跑完命令之后我们需要加入事件监听器：在app/Providers/EventServiceProvide.php中protected $listen=[];中加入： Registered::class =&amp;gt; [ SendEmailVerificationNotification::class, ], &amp;#39;SocialiteProviders\Manager\SocialiteWasCalled&amp;#39; =&amp;gt; [ &amp;#39;SocialiteProviders\QQ\QqExtendSocialite@handle&amp;#39;, ], ]; 去.env里面配置一下key和secret QQ_KEY=your key QQ_SECRET=your secret QQ_REDIRECT_URI=http://your-callback-url, 去config/services.php中加入 &amp;#39;client_id&amp;#39; =&amp;gt; env(&amp;#39;QQ_KEY&amp;#39;), // Your QQ Client ID &amp;#39;client_secret&amp;#39; =&amp;gt; env(&amp;#39;QQ_SECRET&amp;#39;), // Your QQ Client Secret &amp;#39;redirect&amp;#39; =&amp;gt;env(&amp;#39;QQ_REDIRECT_URI&amp;#39;), //这个地址很重要 ], 设计路由：在web.php当中,思考：我们需要定义两个路由，一个是跳转到 qq 登录给予权限的页面，和 qq 回退过来之后的页面,路由设计如下： Route::namespace(&amp;#39;Auth&amp;#39;)-&amp;gt;prefix(&amp;#39;auth/qq&amp;#39;)-&amp;gt;group(function () { Route::get(&amp;#39;/&amp;#39;, &amp;#39;SocialitesController@qq&amp;#39;); Route::get(&amp;#39;callback&amp;#39;, &amp;#39;SocialitesController@callback&amp;#39;); }); 前缀和命名空间可以随意更改,打印路由终端命令：php artisan r:l</description></item><item><title>laravel+tp项目如何上线以及ssl证书的配置</title><link>http://www.example.com/posts/laravel+tp%E9%A1%B9%E7%9B%AE%E5%A6%82%E4%BD%95%E4%B8%8A%E7%BA%BF%E4%BB%A5%E5%8F%8Assl%E8%AF%81%E4%B9%A6%E7%9A%84%E9%85%8D%E7%BD%AE/</link><pubDate>Wed, 26 Jul 2023 22:21:16 +0800</pubDate><guid>http://www.example.com/posts/laravel+tp%E9%A1%B9%E7%9B%AE%E5%A6%82%E4%BD%95%E4%B8%8A%E7%BA%BF%E4%BB%A5%E5%8F%8Assl%E8%AF%81%E4%B9%A6%E7%9A%84%E9%85%8D%E7%BD%AE/</guid><description>写完的项目如何部署上线呢？ Link to heading 前言：前几天的文章有写到虚拟机的安装那一块，配置了 nginx，mysql，和 php Link to heading （一）域名解析及 ssl 证书的申请 Link to heading 以腾讯云为例：
进入控制台，域名管理，解析，会进入到另外一个页面 添加记录 主机记录：abc 记录类型：A 线路类型：默认 记录值：服务器公网 ip 其他不用改，直接解析 注：（1）如果你在主机记录第一个框中填入了 www，代表你解析的是一级域名，一级域名只能绑一个项目，也就是你上线后你的域名需要www.xxxx.com , （2）解析成二级域名，主机记录框随便写，例如 abc，那么访问就变成了abc.xxxx.com 申请 ssl 证书（可要可不要，没有就是 http 连接访问，申请后配置可转换为 https 访问）例如：没有证书：http://abc.xxxxx.com加了证书之后https://abc.xxxx.com 证书的申请步骤： (1) 控制台，云产品点进 ssl 证书 （2）申请免费证书 （3）等待审核，审核完后才能下载到本地 （二）xshell 连接服务器，配置 nginx Link to heading 命令：ssh xxx@xx.xxx.xx.xxx //xxx:线上服务器用户名可修改 xx.xxx.xx.xxx:服务器公网ip 然后会弹出一个框再输入线上服务器的密码 sudo su //管理员权限 cd /返回根目录 cd etc/nginx/sites-available/ //进入nginx下面 ls cp default php //php是我随意定义的 vi php laravel 项目将 nginx 做如下配置 详细代码如下：</description></item><item><title>从0到1使用uniapp写小程序(第二章：引入uview)</title><link>http://www.example.com/posts/%E4%BB%8E0%E5%88%B01%E4%BD%BF%E7%94%A8uniapp%E5%86%99%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%BC%95%E5%85%A5uview/</link><pubDate>Wed, 26 Jul 2023 22:21:16 +0800</pubDate><guid>http://www.example.com/posts/%E4%BB%8E0%E5%88%B01%E4%BD%BF%E7%94%A8uniapp%E5%86%99%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%BC%95%E5%85%A5uview/</guid><description>安装 scss Link to heading uview 依赖于 scss 模块
安装 view Link to heading 下载安装: 登录一下 hbuild，一键导入 huilder 插件市场-view
配置 Link to heading 项目 main.js 中引入： // main.js import uView from &amp;#34;@/uni_modules/uview-ui&amp;#34;; Vue.use(uView); 注意这两行要放在 import Vue 之后。
引入 scss Link to heading @import &amp;#34;@/uni_modules/uview-ui/theme.scss&amp;#34;; app.vue 引入 基础样式 首行加入 lang=&amp;ldquo;scss&amp;rdquo; Link to heading &amp;lt;style lang=&amp;#34;scss&amp;#34;&amp;gt; /* 注意要写在第一行，同时给style标签加入lang=&amp;#34;scss&amp;#34;属性 */ @import &amp;#34;@/uni_modules/uview-ui/index.scss&amp;#34;; &amp;lt;/style&amp;gt; 配置 easycom 组件模式 Link to heading 打开 pages.json 加入 // pages.</description></item><item><title>虚拟机安装centos</title><link>http://www.example.com/posts/virtualbox%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85centos/</link><pubDate>Wed, 26 Jul 2023 22:21:16 +0800</pubDate><guid>http://www.example.com/posts/virtualbox%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85centos/</guid><description>虚拟机安装 centos Link to heading @TOC
一、安装前提 Link to heading 1.准备 Vm virtualbox 软件，下载地址 下载完成之后，选择自己的目录，一路 next 完成安装 2.准备 linux centos 镜像，下载地址
二、安装 centos Link to heading 1.运行 virtualbox，如下： Link to heading 2.点击新建，如下： Link to heading 名称随意填，文件夹创建新的 类型选择 linux 的
2.划分内存以及设置 Link to heading 注意安装在哪个位置是随意的但需要保证有 20G 以上的大小，直接下一步，内存 2048M，虚拟硬盘 20G 然后下一步下一步 ok。 点击设置选择网络，网卡选择桥接网卡，这时点击 ok，你会发现有电脑不能点，报了一个错误，没有禁用虚拟化硬盘。这是因为你的你 Virtualization Technology 没有开启，需要进入 bios 开启一下 3.导入盘片，点击存储中的盘片位置，选择自己下载的镜像文件 Link to heading 4.启动 按照图形化界面设置账号密码就可以了 Link to heading 如果启动之后不能 ping 通外网</description></item><item><title>虚拟机搭建 hadoop</title><link>http://www.example.com/posts/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAhadoop/</link><pubDate>Wed, 26 Jul 2023 22:21:16 +0800</pubDate><guid>http://www.example.com/posts/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BAhadoop/</guid><description>虚拟机搭建 hadoop Link to heading @TOC
一、搭建 centos 虚拟机， Link to heading 1.分区等设置 Link to heading 下载镜像导入 ，分区： 硬件：内存 2G，硬盘 50G 分区：/boot 挂载 1g /swap 挂载 4G （内存不够可采用磁盘当内存使用） /挂载 45G
2.网络 ip 设置 Link to heading （1）虚拟网络编辑器设置：选择 vmnet8 子网 ip 设置网段修改为任意网段 例如 10 nat 设置：原则同网段就想 （2）本地机设置：vmnet8 ipv4 属性 （3）虚拟机 centos 系统设置：
vim /etc/sysconfig/network-scripts/ifcfg-ens33 如下： 最后重启一下虚拟机。。 ping 一下外网和内网，查看是否能通信，通信就搞定 设置一下 host vim /etc/hosts 安装一下软件工具包 yum install -y epel-release 关闭防火墙 systemctl stop firewalld 禁止防火墙开机自启 systemctl disable firewalld.</description></item></channel></rss>